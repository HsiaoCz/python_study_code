# 生成器函数
# 当一个函数有一个yield标识的时候
# python会给它打上一个标签,认为它是一个生成器函数
def gen(num):
    while num > 0:
        yield num
        num -= 1
    return


# 调用一个生成器函数，会返回一个生成器对象
# 保存到g这个变量
# 生成器对象
g = gen(5)

first = next(g)
# 当执行next这个函数的时候，才开始真正执行函数体
for i in g:
    print(i)

# 迭代器

lst = [1, 2, 3, 5]

for i in lst:
    print(i)

# 在for loop的实现背后有两个东西
# 迭代器和可迭代对象
# 可迭代对象：一个对象可以一个一个的返回它的成员
# 迭代器：一个表示数据流的对象，使用__next__()可以一个一个迭代它的元素

# 区别：一个可迭代对象更像是一个数据的保存者
# 它是可以没有状态的
# 一个迭代器一定是有状态的，但是它并不需要实现一个可迭代对象

# 从实现上看，一个iterable(可迭代对象) 要么有__iter__(),要么是一个sequence
# 有__getitem__()这个方法
# 这两个都是为了保证它在__iter__()的作用下，可以返回一个迭代器
# 而迭代器必须要有__next__()
# 这个魔法函数保证一个迭代器在被next作用的时候，可以返回下一个可迭代对象里面的值
# 其实就是迭代器是有状态的，迭代这个行为需要在迭代器上来做，所以需要实现next，
# 而可迭代的（iterable）是一个容器，对一个可迭代容器进行for loop隐式返回了一个这个容器上的迭代器（也就是指针）
# 容器上需要定义iter方法来返回指针，指针需要实现next
