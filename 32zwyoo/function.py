# 函数定义与调用
def hello(a=10, b=12):
    print(a + b)


hello(a=2, b=1)
# 有返回值的函数


def calc(a, b):
    c = a + b
    return c


result = calc(12, 13)
print(result)

# 函数参数
# 定义处 形式参数
# 调用处 实际参数
# 使用关键字参数 可以不按照顺序来写调用
m = calc(a=12, b=13)
print(m)
# 不使用关键字实参，需要按照顺序传入参数

# 函数参数的传递
def func(a, b):
    print("a:", a)
    print("b:", b)
    a = 100
    b.append(10)
    print("a:", a)
    print("b:", b)


# 传入的参数是不可变类型时，在函数体内改变参数的值，对函数外的参数没有影响
# 传入可变参数，在函数内修改参数的值，对函数外的参数也会改变
a = 12
b = [12, 13, 14]
print("a:", a)
print("b:", b)
func(a, b)
print("a:", a)
print("b:", b)

# 函数参数定义
# 1.个数可变的位置参数
# * 定义个数可变的位置形参
# 结果为一个元组
# 2.个数可变的关键字形参
# 定义函数时，无法事先确定传递的关键字实参的个数，使用可变的关键字形参
# 使用** 定义个数可变的关键字形参
# 结果为一个字典


# 函数定义的时候，可变的位置参数
# 函数的参数可以传过来很多个
# 类似于go中的...
# 不过go中的...只能在最后一个参数上使用
def func(*a):
    print(a)


func(10, 20, 30)

# 函数定义的时候，关键字参数
# 结果为字典


def hell(**args):
    print(args)


hell(a=10, b=20, c=30)

# 个数可变的位置参数只能定义一个
# 可变的关键字参数只能定义一个

# 在一个函数的定义中，既有关键字参数，又有个数可变的位置形参
# 要求个数可变的位置形参放在个数可变的关键字形参之前
# 可变位参只能在可变关键字参数之前


def h1(*a, **b):
    pass  # pass跳过 类似于go当中的_


# def h2(**a,*b):
#     pass

# 函数的返回值，当函数返回多个值的时候，结果为元组
def fun(num):
    odd = []  # 存奇数
    even = []  # 存偶数
    for i in num:
        if i % 2:  # 每个对象都有一个布尔值，当i%2 为True，否则为True
            odd.append(i)
        else:
            even.append(i)
    return odd, even


print(fun([10, 20, 30, 40, 13, 15, 17, 21]))
# 函数由多个返回值的时候，结果为元组
# 每个对象都有一个布尔值
# 0的布尔值为False 非零的布尔值为True
# 如果函数没有返回值，函数执行完毕之后，不需要给调用处提供数据
# return可以不写
# 函数只有一个返回值，返回类型
# 函数有多个返回值的时候，返回的结果是一个元组
